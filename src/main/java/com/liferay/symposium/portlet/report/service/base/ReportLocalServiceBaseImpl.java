package com.liferay.symposium.portlet.report.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.symposium.portlet.report.model.Report;
import com.liferay.symposium.portlet.report.service.ReportLocalService;
import com.liferay.symposium.portlet.report.service.persistence.ReportPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the report local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.symposium.portlet.report.service.impl.ReportLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.symposium.portlet.report.service.impl.ReportLocalServiceImpl
 * @see com.liferay.symposium.portlet.report.service.ReportLocalServiceUtil
 * @generated
 */
public abstract class ReportLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements ReportLocalService, IdentifiableBean {
    @BeanReference(type = com.liferay.symposium.portlet.report.service.ReportLocalService.class)
    protected com.liferay.symposium.portlet.report.service.ReportLocalService reportLocalService;
    @BeanReference(type = ReportPersistence.class)
    protected ReportPersistence reportPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private ReportLocalServiceClpInvoker _clpInvoker = new ReportLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.liferay.symposium.portlet.report.service.ReportLocalServiceUtil} to access the report local service.
     */

    /**
     * Adds the report to the database. Also notifies the appropriate model listeners.
     *
     * @param report the report
     * @return the report that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Report addReport(Report report) throws SystemException {
        report.setNew(true);

        return reportPersistence.update(report);
    }

    /**
     * Creates a new report with the primary key. Does not add the report to the database.
     *
     * @param reportId the primary key for the new report
     * @return the new report
     */
    @Override
    public Report createReport(long reportId) {
        return reportPersistence.create(reportId);
    }

    /**
     * Deletes the report with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param reportId the primary key of the report
     * @return the report that was removed
     * @throws PortalException if a report with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Report deleteReport(long reportId)
        throws PortalException, SystemException {
        return reportPersistence.remove(reportId);
    }

    /**
     * Deletes the report from the database. Also notifies the appropriate model listeners.
     *
     * @param report the report
     * @return the report that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Report deleteReport(Report report) throws SystemException {
        return reportPersistence.remove(report);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Report.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return reportPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.symposium.portlet.report.model.impl.ReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return reportPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.symposium.portlet.report.model.impl.ReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return reportPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return reportPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return reportPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Report fetchReport(long reportId) throws SystemException {
        return reportPersistence.fetchByPrimaryKey(reportId);
    }

    /**
     * Returns the report with the matching UUID and company.
     *
     * @param uuid the report's UUID
     * @param  companyId the primary key of the company
     * @return the matching report, or <code>null</code> if a matching report could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Report fetchReportByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return reportPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the report matching the UUID and group.
     *
     * @param uuid the report's UUID
     * @param groupId the primary key of the group
     * @return the matching report, or <code>null</code> if a matching report could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Report fetchReportByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return reportPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the report with the primary key.
     *
     * @param reportId the primary key of the report
     * @return the report
     * @throws PortalException if a report with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Report getReport(long reportId)
        throws PortalException, SystemException {
        return reportPersistence.findByPrimaryKey(reportId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return reportPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the report with the matching UUID and company.
     *
     * @param uuid the report's UUID
     * @param  companyId the primary key of the company
     * @return the matching report
     * @throws PortalException if a matching report could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Report getReportByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return reportPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the report matching the UUID and group.
     *
     * @param uuid the report's UUID
     * @param groupId the primary key of the group
     * @return the matching report
     * @throws PortalException if a matching report could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Report getReportByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return reportPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the reports.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.symposium.portlet.report.model.impl.ReportModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of reports
     * @param end the upper bound of the range of reports (not inclusive)
     * @return the range of reports
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Report> getReports(int start, int end)
        throws SystemException {
        return reportPersistence.findAll(start, end);
    }

    /**
     * Returns the number of reports.
     *
     * @return the number of reports
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getReportsCount() throws SystemException {
        return reportPersistence.countAll();
    }

    /**
     * Updates the report in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param report the report
     * @return the report that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Report updateReport(Report report) throws SystemException {
        return reportPersistence.update(report);
    }

    /**
     * Returns the report local service.
     *
     * @return the report local service
     */
    public com.liferay.symposium.portlet.report.service.ReportLocalService getReportLocalService() {
        return reportLocalService;
    }

    /**
     * Sets the report local service.
     *
     * @param reportLocalService the report local service
     */
    public void setReportLocalService(
        com.liferay.symposium.portlet.report.service.ReportLocalService reportLocalService) {
        this.reportLocalService = reportLocalService;
    }

    /**
     * Returns the report persistence.
     *
     * @return the report persistence
     */
    public ReportPersistence getReportPersistence() {
        return reportPersistence;
    }

    /**
     * Sets the report persistence.
     *
     * @param reportPersistence the report persistence
     */
    public void setReportPersistence(ReportPersistence reportPersistence) {
        this.reportPersistence = reportPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.liferay.symposium.portlet.report.model.Report",
            reportLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.liferay.symposium.portlet.report.model.Report");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Report.class;
    }

    protected String getModelClassName() {
        return Report.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = reportPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
