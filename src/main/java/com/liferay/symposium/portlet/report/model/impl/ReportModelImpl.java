package com.liferay.symposium.portlet.report.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.symposium.portlet.report.model.Report;
import com.liferay.symposium.portlet.report.model.ReportModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Report service. Represents a row in the &quot;SYMPOSIUM_Report&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.symposium.portlet.report.model.ReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportImpl
 * @see com.liferay.symposium.portlet.report.model.Report
 * @see com.liferay.symposium.portlet.report.model.ReportModel
 * @generated
 */
public class ReportModelImpl extends BaseModelImpl<Report>
    implements ReportModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a report model instance should use the {@link com.liferay.symposium.portlet.report.model.Report} interface instead.
     */
    public static final String TABLE_NAME = "SYMPOSIUM_Report";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "reportId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "reportName", Types.VARCHAR },
            { "reportStatus", Types.VARCHAR },
            { "startTime", Types.TIMESTAMP },
            { "endTime", Types.TIMESTAMP },
            { "sectionSummary", Types.BOOLEAN },
            { "sectionSummaryStatus", Types.VARCHAR },
            { "sectionCosts", Types.BOOLEAN },
            { "sectionCostsStatus", Types.VARCHAR },
            { "sectionROI", Types.BOOLEAN },
            { "sectionROIStatus", Types.VARCHAR },
            { "sectionMetrics", Types.BOOLEAN },
            { "sectionMetricsStatus", Types.VARCHAR },
            { "sectionRecommendations", Types.BOOLEAN },
            { "sectionRecommendationsStatus", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SYMPOSIUM_Report (uuid_ VARCHAR(75) null,reportId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,reportName VARCHAR(75) null,reportStatus VARCHAR(75) null,startTime DATE null,endTime DATE null,sectionSummary BOOLEAN,sectionSummaryStatus VARCHAR(75) null,sectionCosts BOOLEAN,sectionCostsStatus VARCHAR(75) null,sectionROI BOOLEAN,sectionROIStatus VARCHAR(75) null,sectionMetrics BOOLEAN,sectionMetricsStatus VARCHAR(75) null,sectionRecommendations BOOLEAN,sectionRecommendationsStatus VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SYMPOSIUM_Report";
    public static final String ORDER_BY_JPQL = " ORDER BY report.reportId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SYMPOSIUM_Report.reportId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.symposium.portlet.report.model.Report"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.symposium.portlet.report.model.Report"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.symposium.portlet.report.model.Report"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long REPORTSTATUS_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long REPORTID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.symposium.portlet.report.model.Report"));
    private static ClassLoader _classLoader = Report.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Report.class };
    private String _uuid;
    private String _originalUuid;
    private long _reportId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _reportName;
    private String _reportStatus;
    private String _originalReportStatus;
    private Date _startTime;
    private Date _endTime;
    private boolean _sectionSummary;
    private String _sectionSummaryStatus;
    private boolean _sectionCosts;
    private String _sectionCostsStatus;
    private boolean _sectionROI;
    private String _sectionROIStatus;
    private boolean _sectionMetrics;
    private String _sectionMetricsStatus;
    private boolean _sectionRecommendations;
    private String _sectionRecommendationsStatus;
    private long _columnBitmask;
    private Report _escapedModel;

    public ReportModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _reportId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setReportId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _reportId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Report.class;
    }

    @Override
    public String getModelClassName() {
        return Report.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("reportId", getReportId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("reportName", getReportName());
        attributes.put("reportStatus", getReportStatus());
        attributes.put("startTime", getStartTime());
        attributes.put("endTime", getEndTime());
        attributes.put("sectionSummary", getSectionSummary());
        attributes.put("sectionSummaryStatus", getSectionSummaryStatus());
        attributes.put("sectionCosts", getSectionCosts());
        attributes.put("sectionCostsStatus", getSectionCostsStatus());
        attributes.put("sectionROI", getSectionROI());
        attributes.put("sectionROIStatus", getSectionROIStatus());
        attributes.put("sectionMetrics", getSectionMetrics());
        attributes.put("sectionMetricsStatus", getSectionMetricsStatus());
        attributes.put("sectionRecommendations", getSectionRecommendations());
        attributes.put("sectionRecommendationsStatus",
            getSectionRecommendationsStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long reportId = (Long) attributes.get("reportId");

        if (reportId != null) {
            setReportId(reportId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String reportName = (String) attributes.get("reportName");

        if (reportName != null) {
            setReportName(reportName);
        }

        String reportStatus = (String) attributes.get("reportStatus");

        if (reportStatus != null) {
            setReportStatus(reportStatus);
        }

        Date startTime = (Date) attributes.get("startTime");

        if (startTime != null) {
            setStartTime(startTime);
        }

        Date endTime = (Date) attributes.get("endTime");

        if (endTime != null) {
            setEndTime(endTime);
        }

        Boolean sectionSummary = (Boolean) attributes.get("sectionSummary");

        if (sectionSummary != null) {
            setSectionSummary(sectionSummary);
        }

        String sectionSummaryStatus = (String) attributes.get(
                "sectionSummaryStatus");

        if (sectionSummaryStatus != null) {
            setSectionSummaryStatus(sectionSummaryStatus);
        }

        Boolean sectionCosts = (Boolean) attributes.get("sectionCosts");

        if (sectionCosts != null) {
            setSectionCosts(sectionCosts);
        }

        String sectionCostsStatus = (String) attributes.get(
                "sectionCostsStatus");

        if (sectionCostsStatus != null) {
            setSectionCostsStatus(sectionCostsStatus);
        }

        Boolean sectionROI = (Boolean) attributes.get("sectionROI");

        if (sectionROI != null) {
            setSectionROI(sectionROI);
        }

        String sectionROIStatus = (String) attributes.get("sectionROIStatus");

        if (sectionROIStatus != null) {
            setSectionROIStatus(sectionROIStatus);
        }

        Boolean sectionMetrics = (Boolean) attributes.get("sectionMetrics");

        if (sectionMetrics != null) {
            setSectionMetrics(sectionMetrics);
        }

        String sectionMetricsStatus = (String) attributes.get(
                "sectionMetricsStatus");

        if (sectionMetricsStatus != null) {
            setSectionMetricsStatus(sectionMetricsStatus);
        }

        Boolean sectionRecommendations = (Boolean) attributes.get(
                "sectionRecommendations");

        if (sectionRecommendations != null) {
            setSectionRecommendations(sectionRecommendations);
        }

        String sectionRecommendationsStatus = (String) attributes.get(
                "sectionRecommendationsStatus");

        if (sectionRecommendationsStatus != null) {
            setSectionRecommendationsStatus(sectionRecommendationsStatus);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getReportId() {
        return _reportId;
    }

    @Override
    public void setReportId(long reportId) {
        _columnBitmask = -1L;

        _reportId = reportId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getReportName() {
        if (_reportName == null) {
            return StringPool.BLANK;
        } else {
            return _reportName;
        }
    }

    @Override
    public void setReportName(String reportName) {
        _reportName = reportName;
    }

    @Override
    public String getReportStatus() {
        if (_reportStatus == null) {
            return StringPool.BLANK;
        } else {
            return _reportStatus;
        }
    }

    @Override
    public void setReportStatus(String reportStatus) {
        _columnBitmask |= REPORTSTATUS_COLUMN_BITMASK;

        if (_originalReportStatus == null) {
            _originalReportStatus = _reportStatus;
        }

        _reportStatus = reportStatus;
    }

    public String getOriginalReportStatus() {
        return GetterUtil.getString(_originalReportStatus);
    }

    @Override
    public Date getStartTime() {
        return _startTime;
    }

    @Override
    public void setStartTime(Date startTime) {
        _startTime = startTime;
    }

    @Override
    public Date getEndTime() {
        return _endTime;
    }

    @Override
    public void setEndTime(Date endTime) {
        _endTime = endTime;
    }

    @Override
    public boolean getSectionSummary() {
        return _sectionSummary;
    }

    @Override
    public boolean isSectionSummary() {
        return _sectionSummary;
    }

    @Override
    public void setSectionSummary(boolean sectionSummary) {
        _sectionSummary = sectionSummary;
    }

    @Override
    public String getSectionSummaryStatus() {
        if (_sectionSummaryStatus == null) {
            return StringPool.BLANK;
        } else {
            return _sectionSummaryStatus;
        }
    }

    @Override
    public void setSectionSummaryStatus(String sectionSummaryStatus) {
        _sectionSummaryStatus = sectionSummaryStatus;
    }

    @Override
    public boolean getSectionCosts() {
        return _sectionCosts;
    }

    @Override
    public boolean isSectionCosts() {
        return _sectionCosts;
    }

    @Override
    public void setSectionCosts(boolean sectionCosts) {
        _sectionCosts = sectionCosts;
    }

    @Override
    public String getSectionCostsStatus() {
        if (_sectionCostsStatus == null) {
            return StringPool.BLANK;
        } else {
            return _sectionCostsStatus;
        }
    }

    @Override
    public void setSectionCostsStatus(String sectionCostsStatus) {
        _sectionCostsStatus = sectionCostsStatus;
    }

    @Override
    public boolean getSectionROI() {
        return _sectionROI;
    }

    @Override
    public boolean isSectionROI() {
        return _sectionROI;
    }

    @Override
    public void setSectionROI(boolean sectionROI) {
        _sectionROI = sectionROI;
    }

    @Override
    public String getSectionROIStatus() {
        if (_sectionROIStatus == null) {
            return StringPool.BLANK;
        } else {
            return _sectionROIStatus;
        }
    }

    @Override
    public void setSectionROIStatus(String sectionROIStatus) {
        _sectionROIStatus = sectionROIStatus;
    }

    @Override
    public boolean getSectionMetrics() {
        return _sectionMetrics;
    }

    @Override
    public boolean isSectionMetrics() {
        return _sectionMetrics;
    }

    @Override
    public void setSectionMetrics(boolean sectionMetrics) {
        _sectionMetrics = sectionMetrics;
    }

    @Override
    public String getSectionMetricsStatus() {
        if (_sectionMetricsStatus == null) {
            return StringPool.BLANK;
        } else {
            return _sectionMetricsStatus;
        }
    }

    @Override
    public void setSectionMetricsStatus(String sectionMetricsStatus) {
        _sectionMetricsStatus = sectionMetricsStatus;
    }

    @Override
    public boolean getSectionRecommendations() {
        return _sectionRecommendations;
    }

    @Override
    public boolean isSectionRecommendations() {
        return _sectionRecommendations;
    }

    @Override
    public void setSectionRecommendations(boolean sectionRecommendations) {
        _sectionRecommendations = sectionRecommendations;
    }

    @Override
    public String getSectionRecommendationsStatus() {
        if (_sectionRecommendationsStatus == null) {
            return StringPool.BLANK;
        } else {
            return _sectionRecommendationsStatus;
        }
    }

    @Override
    public void setSectionRecommendationsStatus(
        String sectionRecommendationsStatus) {
        _sectionRecommendationsStatus = sectionRecommendationsStatus;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Report.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Report.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Report toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Report) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ReportImpl reportImpl = new ReportImpl();

        reportImpl.setUuid(getUuid());
        reportImpl.setReportId(getReportId());
        reportImpl.setGroupId(getGroupId());
        reportImpl.setCompanyId(getCompanyId());
        reportImpl.setUserId(getUserId());
        reportImpl.setUserName(getUserName());
        reportImpl.setCreateDate(getCreateDate());
        reportImpl.setModifiedDate(getModifiedDate());
        reportImpl.setReportName(getReportName());
        reportImpl.setReportStatus(getReportStatus());
        reportImpl.setStartTime(getStartTime());
        reportImpl.setEndTime(getEndTime());
        reportImpl.setSectionSummary(getSectionSummary());
        reportImpl.setSectionSummaryStatus(getSectionSummaryStatus());
        reportImpl.setSectionCosts(getSectionCosts());
        reportImpl.setSectionCostsStatus(getSectionCostsStatus());
        reportImpl.setSectionROI(getSectionROI());
        reportImpl.setSectionROIStatus(getSectionROIStatus());
        reportImpl.setSectionMetrics(getSectionMetrics());
        reportImpl.setSectionMetricsStatus(getSectionMetricsStatus());
        reportImpl.setSectionRecommendations(getSectionRecommendations());
        reportImpl.setSectionRecommendationsStatus(getSectionRecommendationsStatus());

        reportImpl.resetOriginalValues();

        return reportImpl;
    }

    @Override
    public int compareTo(Report report) {
        int value = 0;

        if (getReportId() < report.getReportId()) {
            value = -1;
        } else if (getReportId() > report.getReportId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Report)) {
            return false;
        }

        Report report = (Report) obj;

        long primaryKey = report.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ReportModelImpl reportModelImpl = this;

        reportModelImpl._originalUuid = reportModelImpl._uuid;

        reportModelImpl._originalGroupId = reportModelImpl._groupId;

        reportModelImpl._setOriginalGroupId = false;

        reportModelImpl._originalCompanyId = reportModelImpl._companyId;

        reportModelImpl._setOriginalCompanyId = false;

        reportModelImpl._originalReportStatus = reportModelImpl._reportStatus;

        reportModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Report> toCacheModel() {
        ReportCacheModel reportCacheModel = new ReportCacheModel();

        reportCacheModel.uuid = getUuid();

        String uuid = reportCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            reportCacheModel.uuid = null;
        }

        reportCacheModel.reportId = getReportId();

        reportCacheModel.groupId = getGroupId();

        reportCacheModel.companyId = getCompanyId();

        reportCacheModel.userId = getUserId();

        reportCacheModel.userName = getUserName();

        String userName = reportCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            reportCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            reportCacheModel.createDate = createDate.getTime();
        } else {
            reportCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            reportCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            reportCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        reportCacheModel.reportName = getReportName();

        String reportName = reportCacheModel.reportName;

        if ((reportName != null) && (reportName.length() == 0)) {
            reportCacheModel.reportName = null;
        }

        reportCacheModel.reportStatus = getReportStatus();

        String reportStatus = reportCacheModel.reportStatus;

        if ((reportStatus != null) && (reportStatus.length() == 0)) {
            reportCacheModel.reportStatus = null;
        }

        Date startTime = getStartTime();

        if (startTime != null) {
            reportCacheModel.startTime = startTime.getTime();
        } else {
            reportCacheModel.startTime = Long.MIN_VALUE;
        }

        Date endTime = getEndTime();

        if (endTime != null) {
            reportCacheModel.endTime = endTime.getTime();
        } else {
            reportCacheModel.endTime = Long.MIN_VALUE;
        }

        reportCacheModel.sectionSummary = getSectionSummary();

        reportCacheModel.sectionSummaryStatus = getSectionSummaryStatus();

        String sectionSummaryStatus = reportCacheModel.sectionSummaryStatus;

        if ((sectionSummaryStatus != null) &&
                (sectionSummaryStatus.length() == 0)) {
            reportCacheModel.sectionSummaryStatus = null;
        }

        reportCacheModel.sectionCosts = getSectionCosts();

        reportCacheModel.sectionCostsStatus = getSectionCostsStatus();

        String sectionCostsStatus = reportCacheModel.sectionCostsStatus;

        if ((sectionCostsStatus != null) && (sectionCostsStatus.length() == 0)) {
            reportCacheModel.sectionCostsStatus = null;
        }

        reportCacheModel.sectionROI = getSectionROI();

        reportCacheModel.sectionROIStatus = getSectionROIStatus();

        String sectionROIStatus = reportCacheModel.sectionROIStatus;

        if ((sectionROIStatus != null) && (sectionROIStatus.length() == 0)) {
            reportCacheModel.sectionROIStatus = null;
        }

        reportCacheModel.sectionMetrics = getSectionMetrics();

        reportCacheModel.sectionMetricsStatus = getSectionMetricsStatus();

        String sectionMetricsStatus = reportCacheModel.sectionMetricsStatus;

        if ((sectionMetricsStatus != null) &&
                (sectionMetricsStatus.length() == 0)) {
            reportCacheModel.sectionMetricsStatus = null;
        }

        reportCacheModel.sectionRecommendations = getSectionRecommendations();

        reportCacheModel.sectionRecommendationsStatus = getSectionRecommendationsStatus();

        String sectionRecommendationsStatus = reportCacheModel.sectionRecommendationsStatus;

        if ((sectionRecommendationsStatus != null) &&
                (sectionRecommendationsStatus.length() == 0)) {
            reportCacheModel.sectionRecommendationsStatus = null;
        }

        return reportCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(45);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", reportId=");
        sb.append(getReportId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", reportName=");
        sb.append(getReportName());
        sb.append(", reportStatus=");
        sb.append(getReportStatus());
        sb.append(", startTime=");
        sb.append(getStartTime());
        sb.append(", endTime=");
        sb.append(getEndTime());
        sb.append(", sectionSummary=");
        sb.append(getSectionSummary());
        sb.append(", sectionSummaryStatus=");
        sb.append(getSectionSummaryStatus());
        sb.append(", sectionCosts=");
        sb.append(getSectionCosts());
        sb.append(", sectionCostsStatus=");
        sb.append(getSectionCostsStatus());
        sb.append(", sectionROI=");
        sb.append(getSectionROI());
        sb.append(", sectionROIStatus=");
        sb.append(getSectionROIStatus());
        sb.append(", sectionMetrics=");
        sb.append(getSectionMetrics());
        sb.append(", sectionMetricsStatus=");
        sb.append(getSectionMetricsStatus());
        sb.append(", sectionRecommendations=");
        sb.append(getSectionRecommendations());
        sb.append(", sectionRecommendationsStatus=");
        sb.append(getSectionRecommendationsStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(70);

        sb.append("<model><model-name>");
        sb.append("com.liferay.symposium.portlet.report.model.Report");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reportId</column-name><column-value><![CDATA[");
        sb.append(getReportId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reportName</column-name><column-value><![CDATA[");
        sb.append(getReportName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reportStatus</column-name><column-value><![CDATA[");
        sb.append(getReportStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startTime</column-name><column-value><![CDATA[");
        sb.append(getStartTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endTime</column-name><column-value><![CDATA[");
        sb.append(getEndTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionSummary</column-name><column-value><![CDATA[");
        sb.append(getSectionSummary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionSummaryStatus</column-name><column-value><![CDATA[");
        sb.append(getSectionSummaryStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionCosts</column-name><column-value><![CDATA[");
        sb.append(getSectionCosts());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionCostsStatus</column-name><column-value><![CDATA[");
        sb.append(getSectionCostsStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionROI</column-name><column-value><![CDATA[");
        sb.append(getSectionROI());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionROIStatus</column-name><column-value><![CDATA[");
        sb.append(getSectionROIStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionMetrics</column-name><column-value><![CDATA[");
        sb.append(getSectionMetrics());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionMetricsStatus</column-name><column-value><![CDATA[");
        sb.append(getSectionMetricsStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionRecommendations</column-name><column-value><![CDATA[");
        sb.append(getSectionRecommendations());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectionRecommendationsStatus</column-name><column-value><![CDATA[");
        sb.append(getSectionRecommendationsStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
